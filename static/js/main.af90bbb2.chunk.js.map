{"version":3,"sources":["components/Header.js","components/Form.js","components/Event.js","components/Events.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","uk-margin","Form","eventNameRef","React","createRef","categoryRef","searchEvent","e","preventDefault","parameters","eventName","_this","current","value","category","props","getEvents","onSubmit","this","ref","type","placeholder","categories","map","key","id","name_localized","Component","Event","_props$event","event","name","logo","url","description","text","length","substring","src","alt","href","target","rel","Events","uk-grid","events","components_Event","App","token","orderBy","state","getCategories","_callee","regenerator_default","wrap","_context","prev","next","concat","fetch","then","response","json","setState","stop","_callee2","_context2","_this$state","components_Header","components_Form","components_Events","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af90bbb2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"uk-margin\" uk-margin=\"true\">\r\n      <h1 className=\"uk-text-center\">Events</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Form extends Component {\r\n  eventNameRef = React.createRef();\r\n  categoryRef = React.createRef();\r\n\r\n  searchEvent = e => {\r\n    e.preventDefault();\r\n\r\n    const parameters = {\r\n      eventName: this.eventNameRef.current.value,\r\n      category: this.categoryRef.current.value\r\n    };\r\n\r\n    this.props.getEvents(parameters);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.searchEvent}>\r\n        <fieldset className=\"uk-fieldset uk-margin\">\r\n          <legend className=\"uk-legend uk-text-center\">\r\n            Search your event by name or category\r\n          </legend>\r\n          <div className=\"uk-column-1-3@m uk-margin\">\r\n            <div className=\"uk-margin\" uk-margin=\"true\">\r\n              <input\r\n                ref={this.eventNameRef}\r\n                className=\"uk-input\"\r\n                type=\"text\"\r\n                placeholder=\"Event name or City\"\r\n              />\r\n            </div>\r\n            <div className=\"uk-margin\" uk-margin=\"true\">\r\n              <select ref={this.categoryRef} className=\"uk-select\">\r\n                {this.props.categories.map(category => (\r\n                  <option key={category.id} value={category.id}>\r\n                    {category.name_localized}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"uk-margin\" uk-margin=\"true\">\r\n              <button className=\"uk-button uk-button-danger\">Search</button>\r\n            </div>\r\n          </div>\r\n        </fieldset>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  categories: PropTypes.array.isRequired,\r\n  getEvents: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Event = props => {\r\n  const { name, logo, url } = props.event;\r\n  let { description } = props.event;\r\n  if (!name || !logo) return null;\r\n  if (description.text.length > 250) {\r\n    description.text = description.text.substring(0, 250);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"uk-card uk-card-default\">\r\n        <div>\r\n          <img src={logo.url} alt={name.text} />\r\n        </div>\r\n        <div className=\"uk-card-body\">\r\n          <h3 className=\"uk-card-title\">{name.text}</h3>\r\n          <p>{description.text}...</p>\r\n        </div>\r\n        <div className=\"uk-card-footer\">\r\n          <a\r\n            className=\"uk-button uk-button-secondary\"\r\n            href={url}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            More Information\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nEvent.propTypes = {\r\n  event: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from '../components/Event';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Events extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"uk-child-width-1-3@m\" uk-grid=\"true\">\r\n        {this.props.events.map(e => (\r\n          <Event key={e.id} event={e} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEvents.propTypes = {\r\n  events: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Events;\r\n","import React, { Component } from 'react';\r\nimport Header from './components/Header';\r\nimport Form from './components/Form';\r\nimport Events from './components/Events';\r\n\r\nclass App extends Component {\r\n  token = 'Z2TNYQIDJPKUZW5MXNM3';\r\n  orderBy = 'date';\r\n\r\n  state = {\r\n    categories: [],\r\n    events: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCategories();\r\n  }\r\n\r\n  getCategories = async () => {\r\n    let url = `https://www.eventbriteapi.com/v3/categories/?token=${\r\n      this.token\r\n    }`;\r\n\r\n    await fetch(url)\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(categories => {\r\n        this.setState({ categories: categories.categories });\r\n      });\r\n  };\r\n\r\n  getEvents = async parameters => {\r\n    let url = `https://www.eventbriteapi.com/v3/events/search/?q=${\r\n      parameters.eventName\r\n    }&sort_by=${this.orderBy}&categories=${parameters.category}&token=${\r\n      this.token\r\n    }`;\r\n\r\n    await fetch(url)\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(events => {\r\n        this.setState({ events: events.events });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { categories, events } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <div className=\"uk-container\">\r\n          <Form categories={categories} getEvents={this.getEvents} />\r\n          <Events events={events} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}